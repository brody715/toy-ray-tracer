/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Vec3F = [number, number, number];
export type GeometryConfig =
  | {
      center: Vec3F;
      kind: "sphere";
      material: MaterialConfig;
      radius: number;
      [k: string]: unknown | undefined;
    }
  | {
      center0: Vec3F;
      center1: Vec3F;
      kind: "moving_sphere";
      material: MaterialConfig;
      radius: number;
      time0: number;
      time1: number;
      [k: string]: unknown | undefined;
    }
  | {
      kind: "cube";
      material: MaterialConfig;
      p_max: Vec3F;
      p_min: Vec3F;
      [k: string]: unknown | undefined;
    }
  | {
      kind: "rect";
      material: MaterialConfig;
      v0: Vec3F;
      v1: Vec3F;
      [k: string]: unknown | undefined;
    }
  | {
      kind: "triangle";
      material: MaterialConfig;
      v0: Vec3F;
      v1: Vec3F;
      v2: Vec3F;
      [k: string]: unknown | undefined;
    }
  | {
      center: Vec3F;
      kind: "disk";
      material: MaterialConfig;
      normal: Vec3F;
      radius: number;
      [k: string]: unknown | undefined;
    }
  | {
      center0: Vec3F;
      center1: Vec3F;
      kind: "cylinder";
      material: MaterialConfig;
      radius: number;
      [k: string]: unknown | undefined;
    }
  | {
      kind: "bvh";
      objects: GeometryConfig[];
      time0: number;
      time1: number;
      [k: string]: unknown | undefined;
    }
  | {
      child: GeometryConfig;
      kind: "tags";
      tags: string[];
      [k: string]: unknown | undefined;
    }
  | {
      kind: "list";
      objects: GeometryConfig[];
      [k: string]: unknown | undefined;
    }
  | {
      angle: number;
      axis: Axis;
      child: GeometryConfig;
      kind: "rotate";
      [k: string]: unknown | undefined;
    }
  | {
      child: GeometryConfig;
      kind: "transforms";
      params: TransformParam[];
      [k: string]: unknown | undefined;
    }
  | {
      child: GeometryConfig;
      kind: "translate";
      offset: Vec3F;
      [k: string]: unknown | undefined;
    }
  | {
      child: GeometryConfig;
      kind: "flip_face";
      [k: string]: unknown | undefined;
    }
  | {
      boundary: GeometryConfig;
      density: number;
      kind: "constant_medium";
      texture: TextureConfig;
      [k: string]: unknown | undefined;
    };
export type MaterialConfig =
  | {
      albedo: TextureConfig;
      kind: "lambertian";
      [k: string]: unknown | undefined;
    }
  | {
      albedo: TextureConfig;
      fuzz: number;
      kind: "metal";
      [k: string]: unknown | undefined;
    }
  | {
      ir: number;
      kind: "dielectric";
      [k: string]: unknown | undefined;
    }
  | {
      emit: TextureConfig;
      kind: "diffuse_light";
      [k: string]: unknown | undefined;
    }
  | {
      albedo: TextureConfig;
      kind: "isotropic";
      [k: string]: unknown | undefined;
    };
export type TextureConfig =
  | {
      color: Vec3F;
      kind: "constant_texture";
      [k: string]: unknown | undefined;
    }
  | {
      file_path: string;
      kind: "image_texture";
      [k: string]: unknown | undefined;
    }
  | {
      even: TextureConfig;
      kind: "checker_texture";
      odd: TextureConfig;
      [k: string]: unknown | undefined;
    };
export type Axis = "X" | "Y" | "Z";
export type TransformParam =
  | {
      angle: number;
      axis: Axis;
      kind: "rotate";
      [k: string]: unknown | undefined;
    }
  | {
      kind: "translate";
      offset: [number, number, number];
      [k: string]: unknown | undefined;
    };
export type SkyConfig = {
  background: Vec3F;
  kind: "solid";
  [k: string]: unknown | undefined;
};
export type WorldConfig = GeometryConfig[] | GeometryConfig;

export interface ProjectConfig {
  name: string;
  scene: SceneConfig;
  settings: Settings;
  [k: string]: unknown | undefined;
}
export interface SceneConfig {
  camera: CameraConfig;
  light?: GeometryConfig | null;
  sky: SkyConfig;
  world: WorldConfig;
  [k: string]: unknown | undefined;
}
export interface CameraConfig {
  aperture: number;
  aspect: number;
  focus_dist: number;
  look_at: Vec3F;
  look_from: Vec3F;
  time0: number;
  time1: number;
  vertical_fov: number;
  view_up: Vec3F;
  [k: string]: unknown | undefined;
}
export interface Settings {
  height: number;
  max_depth: number;
  nsamples: number;
  output_dir: string;
  width: number;
  [k: string]: unknown | undefined;
}
